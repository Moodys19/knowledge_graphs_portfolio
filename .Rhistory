summarise(unique_league_ids = n_distinct(league_id),
unique_level_ids = n_distinct(league_level))%>%
filter(unique_league_ids > 1 | unique_level_ids > 1)
# we will have to apply the league levels manually
unique(players_clean$league_name) # also there is one empty league name
#### teams df
colnames(teams_df)
red_teams_cols <- c(
"fifa_update", "update_as_of", "coach_id", "home_stadium","captain","short_free_kick",
"long_free_kick", "left_short_free_kick", "right_short_free_kick", "penalties",
"left_corner", "right_corner", "def_style", "def_team_width", "def_team_depth",
"def_defence_pressure", "def_defence_aggression", "def_defence_width",
"def_defence_defender_line", "off_style", "off_build_up_play", "off_chance_creation",
"off_team_width", "off_players_in_box", "off_corners", "off_free_kicks",
"build_up_play_speed", "build_up_play_dribbling", "build_up_play_passing",
"build_up_play_positioning", "chance_creation_passing", "chance_creation_crossing",
"chance_creation_shooting", "chance_creation_positioning"
)
teams_clean <- teams_df %>%
select(-all_of(red_teams_cols)) %>%
filter(league_name != "Friendly International") %>%
mutate(
league_nationality_name = case_when(
league_name == "Ligue 1" & nationality_name == "Monaco" ~ "France",
league_name == "Ligue 2" & nationality_name == "Austria" ~ "France",
league_name == "Championship" & nationality_name == "Wales" ~ "England",
league_name == "League Two" & nationality_name == "Wales" ~ "England",
league_name == "Premier Division" & nationality_name == "Northern Ireland" ~ "Republic of Ireland",
.default = nationality_name
)
) %>%
select(-nationality_name)
####### Missing value Handling -----
free_agent_cols <- c("league_name", "club_name")
check_names <- players_clean %>%
select(key, where(~ !is.numeric(.))) %>%  # Select only non-numeric columns
filter(if_any(where(~ !is.numeric(.)), ~ . == "")) %>%
filter(!if_any(any_of(free_agent_cols), ~ . == ""))
#' checking the sofifa database (which is the source of the data) we see that
#' for players that are free agents in the FIFA game we get missing values for the
#' team and league name. We will be filtering these players due to them often having
#' having clubs irl that are not part of the game
#' Missing player values will be imputed
players_clean <- players_clean %>%
filter(!if_any(any_of(free_agent_cols), ~ . == ""))
# it seems that the russian premier league has the same name as the english prem
check_PL <- players_clean %>%
filter(league_name == "Premier League") %>%
select(club_name) %>%
distinct()
# Clubs without a league are added to the premier league for some reason,
og_prem <- c(check_PL$club_name[1:18], "Sheffield United", "Luton Town")
russian_prem <- c(check_PL$club_name[26:47])
# we get the nationalities from the leagues
# furthermore we will be dropping leagues with too little teams
check_size <- players_clean %>%
select(league_name, club_name) %>%
distinct() %>%
group_by(league_name)%>%
summarise(N = n()) %>%
filter(N <= 8)
players_clean <- players_clean %>%
left_join(
teams_clean %>%
select(team_id, team_name, league_name, league_nationality_name) %>%
distinct(team_id, team_name, league_name, .keep_all = TRUE),
by = c("club_team_id" = "team_id", "league_name" = "league_name", "club_name" = "team_name")
) %>%
#rename(league_nationality_name = nationality_name.y)%>%
select(colnames(players_clean)[1:19], league_nationality_name, everything())%>%
mutate(
league_name = case_when(
league_name == "Premier League"  & club_name %in% russian_prem ~ "Russian Premier League",
league_name == "Premier League" & !(club_name %in% og_prem | club_name %in% russian_prem) ~ "filter",
# rename the primera division leagues
#league_name == "Primera División" ~ paste0(league_name, "_", substr(league_nationality_name, 1, 4)), # wir kombinieren fürs imputieren dann mit der Nationalität
#league_name == "Primera Division" ~ paste0(league_name, "_", substr(league_nationality_name, 1, 4)),
league_name %in% check_size$league_name ~ "filter",
.default = league_name
)
) %>%
filter(league_name != "filter")
teams_clean <- teams_clean %>%
mutate(
league_name = case_when(
league_name == "Premier League"  & team_name %in% russian_prem ~ "Russian Premier League",
league_name == "Premier League" & !(team_name %in% og_prem | team_name %in% russian_prem) ~ "filter",
league_name %in% check_size$league_name ~ "filter",
.default = league_name
)
) %>%
filter(league_name != "filter")
check_duplicates <- players_clean %>%
select(league_nationality_name, league_name, league_id) %>%
distinct() %>%  # Ensure we work with unique combinations
group_by(league_nationality_name, league_name) %>%
summarise(num_ids = n_distinct(league_id), .groups = "drop") %>%
filter(num_ids > 1)
check_duplicates_teams <- teams_clean %>%
select(league_nationality_name, league_name, league_id) %>%
distinct() %>%  # Ensure we work with unique combinations
group_by(league_nationality_name, league_name) %>%
summarise(num_ids = n_distinct(league_id), .groups = "drop") %>%
filter(num_ids > 1)
# ids and league levels will be mapped and fixed
# manually map league_level and create new league_id
league_names <- players_clean %>%
select(league_name, league_nationality_name) %>%
distinct()
write.csv2(league_names, "dataset/league_names.csv")
league_names_edited <- read.csv2("dataset/league_names_edited.csv")
players_clean <- players_clean %>%
select(-league_id, -league_level) %>%
left_join(league_names_edited, by = c("league_name"="league_name", "league_nationality_name" = "league_nationality_name")) %>%
select(colnames(.)[1:18], league_id, league_level, everything())
#league_check[is.na(league_check$league_id), ]
#unique(teams_df$nationality_name)
check_empty_vals <- players_clean %>%
select(key, where(~ !is.numeric(.))) %>%  # Select only non-numeric columns
#filter(if_any(where(~ !is.numeric(.)), ~ . == ""))
summarise(across(everything(), ~ sum(. == "", na.rm = TRUE), .names = "{col}")) %>%
pivot_longer(2:ncol(.), names_to = "column", values_to = "values")
# impute empty value_eur
players_clean$value_eur <- as.numeric(ifelse(players_clean$value_eur == "", NA, players_clean$value_eur))
# add age_range so that we can impute more easily
players_clean <- players_clean %>%
mutate(age_group = case_when(
age <= 18 ~ "18-",
age >= 18 & age <= 20 ~ "18-20",
age >= 21 & age <= 25 ~ "18-20",
age >= 25 & age <= 29 ~ "25-29",
age >= 30            ~ "30+",
TRUE                 ~ NA_character_  # Handle missing or invalid ages
),
overall_range = case_when(
overall <= 50 ~ "50-",
overall >= 51 & overall <= 55 ~ "51-55",
overall >= 56 & overall <= 60 ~ "56-60",
overall >= 61 & overall <= 65 ~ "61-65",
overall >= 66 & overall <= 70 ~ "66-70",
overall >= 71 & overall <= 75 ~ "71-75",
overall >= 76 & overall <= 80 ~ "76-80",
overall >= 81 & overall <= 85 ~ "81-85",
overall >= 86 & overall <= 90 ~ "86-90",
overall > 90 ~ "90+",
TRUE ~ NA_character_  # Handle missing or invalid overall values
)
)
# Impute missing values in value_eur
players_clean <- players_clean %>%
group_by(position_category, age_group, overall_range, league_level) %>%  # Group by relevant columns, including age_group
mutate(value_eur = ifelse(is.na(value_eur), mean(value_eur, na.rm = TRUE), value_eur)) %>%
ungroup() %>%# Remove grouping
mutate(value_eur = ifelse(is.nan(value_eur), min(value_eur, na.rm = TRUE), value_eur)) #this only concerns one observation
# TODO: teams_df, aktualisiere hier die IDs und die League Levels bzw. missing values
summary(players_clean$value_eur)
###############################################################################_
############### Knowledge Graphs Portfolio - Data Preperation ----
###############################################################################_
#' All the initial data exploration and manipulation is handled in this file.
#' TODO: Eine Beschreibung des Datensatzes hierhin
rm(list = ls())
getwd()
setwd("C:/mahmoud uni/TU/SS2024/KGs/Portfolio")
# TODO: HIER pfad aktualisiereen
library(tidyverse)
library(stringr)
players_df <- read.csv2("dataset/player_dataset.csv", sep = ",")
teams_df <- read.csv2("dataset/team_dataset.csv", sep = ",")
############################# Choose Columns and Fix initial issues ----
#' First we will remove all the redundant columns
#' Wir gehen mal die Columns durch und schauen welche Variablen wir rausschmeißen
#' und welche wir manipulierne bevor wir uns um die NAs kümmern
#'  - Club_position will be changed to whether player is a starter or not.
#'  - player_position will be changed so that its just GK, DEF, MF, Attack
#'  - Club_loaned_from will be transformed into a binary variable on_loan
#'  work rate aufteilen in workrate off und workrate def
#'  Wir werfen die positions spezifischen Ratings weg da
#'  die relevante information sich im allgemeinen Rating sowie
#'  in den einzelnen stats befindet. Wir lassen die Nationalmannschafts
#'  daten weg, weil fifa nicht alle nationalitäten beinhaltet und somit
#'  information verloren gehen würde
#'  Release Clause wird gedroppt weil diese daten nicht der realität entsprechen
red_cols <- c('fifa_update', 'update_as_of', 'short_name', 'club_jersey_number', 'nation_team_id',
'nation_position', 'dob', 'nation_jersey_number', 'player_tags',
'player_traits', 'real_face', "release_clause_eur",'ls', 'st', 'rs', 'lw', 'lf',
'cf', 'rf', 'rw', 'lam', 'cam', 'ram', 'lm', 'lcm', 'cm',  'rcm', 'rm', 'lwb', 'ldm',
'cdm', 'rdm', 'rwb', 'lb', 'lcb', 'cb', 'rcb', 'rb', 'gk')
manipulated_cols <- c('club_loaned_from')
players_clean <- players_df %>%
select(-all_of(red_cols)) %>%
mutate(
club_joined_date = as.Date(club_joined_date),
on_loan = ifelse(is.na(club_loaned_from), 0, 1),
club_position = case_when(
club_position == "RES" ~ 0,
club_position == "SUB" ~ 1,
is.na(club_position) ~ NA_real_,
TRUE ~ 2
),
fifa_version =  as.integer(fifa_version)
) %>%
select(-all_of(manipulated_cols))
#' club_position hat das Problem das wenn Spieler verletzt sind oder sonst was
#' die nicht in der Aufstellung sind obwohl sie eigentlisch Stammspieler sind (De Bruyne z.B.)
#' irl müsste man ein anderes Scoring verwenden -> z.B.: ratio starting XI (oder > 30 min played) zu games available
#' mapping function used to map the more granular positions to the categories
#' "GK" → "GK"
#' "ST", "CF" → "ATT"
#' "RW", "LW", "RWB", "LWB" → "WING"
#' "CM", "CAM", "CDM", "LM", "RM" → "MID"
#' "CB", "RB", "LB" → "DEF"
#' We use the first position as we assume that to be the main position of the player
#' the reason wingers get an own category is because in some systems such as the one played by
#' Conte RWB/LWB are more attacking positions
map_position <- function(position) {
if (is.na(position)) {
return(NA)  # Keep NAs as they are
}
first_position <- str_split(position, ", ")[[1]][1]  # Get the first position
if (first_position == "GK") {
return("GK")
} else if (first_position %in% c("ST", "CF")) {
return("ATT")
} else if (first_position %in% c("RW", "LW", "RWB", "LWB")) {
return("WING")
} else if (first_position %in% c("CM", "CAM", "CDM", "LM", "RM")) {
return("MID")
} else if (first_position %in% c("CB", "RB", "LB")) {
return("DEF")
} else {
return(NA)  # Default case for unmatched values
}
}
# create key, position and captain
players_clean <- players_clean %>%
mutate(position_category = sapply(player_positions, map_position),
key = paste0(player_id, "@", fifa_version) # ACHTUNG: we create a unique key here
) %>%
select(key, all_of(colnames(players_clean)[1:6]), position_category, everything())
# There seems to be some issues with the league names and ids
league_check <- players_clean %>%
group_by(league_name) %>%
summarise(unique_league_ids = n_distinct(league_id),
unique_level_ids = n_distinct(league_level))%>%
filter(unique_league_ids > 1 | unique_level_ids > 1)
# we will have to apply the league levels manually
unique(players_clean$league_name) # also there is one empty league name
#### teams df
colnames(teams_df)
red_teams_cols <- c(
"fifa_update", "update_as_of", "coach_id", "home_stadium","captain","short_free_kick",
"long_free_kick", "left_short_free_kick", "right_short_free_kick", "penalties",
"left_corner", "right_corner", "def_style", "def_team_width", "def_team_depth",
"def_defence_pressure", "def_defence_aggression", "def_defence_width",
"def_defence_defender_line", "off_style", "off_build_up_play", "off_chance_creation",
"off_team_width", "off_players_in_box", "off_corners", "off_free_kicks",
"build_up_play_speed", "build_up_play_dribbling", "build_up_play_passing",
"build_up_play_positioning", "chance_creation_passing", "chance_creation_crossing",
"chance_creation_shooting", "chance_creation_positioning"
)
teams_clean <- teams_df %>%
select(-all_of(red_teams_cols)) %>%
filter(league_name != "Friendly International") %>%
mutate(
league_nationality_name = case_when(
league_name == "Ligue 1" & nationality_name == "Monaco" ~ "France",
league_name == "Ligue 2" & nationality_name == "Austria" ~ "France",
league_name == "Championship" & nationality_name == "Wales" ~ "England",
league_name == "League Two" & nationality_name == "Wales" ~ "England",
league_name == "Premier Division" & nationality_name == "Northern Ireland" ~ "Republic of Ireland",
.default = nationality_name
)
) %>%
select(-nationality_name)
####### Missing value Handling -----
free_agent_cols <- c("league_name", "club_name")
check_names <- players_clean %>%
select(key, where(~ !is.numeric(.))) %>%  # Select only non-numeric columns
filter(if_any(where(~ !is.numeric(.)), ~ . == "")) %>%
filter(!if_any(any_of(free_agent_cols), ~ . == ""))
#' checking the sofifa database (which is the source of the data) we see that
#' for players that are free agents in the FIFA game we get missing values for the
#' team and league name. We will be filtering these players due to them often having
#' having clubs irl that are not part of the game
#' Missing player values will be imputed
players_clean <- players_clean %>%
filter(!if_any(any_of(free_agent_cols), ~ . == ""))
# it seems that the russian premier league has the same name as the english prem
check_PL <- players_clean %>%
filter(league_name == "Premier League") %>%
select(club_name) %>%
distinct()
# Clubs without a league are added to the premier league for some reason,
og_prem <- c(check_PL$club_name[1:18], "Sheffield United", "Luton Town")
russian_prem <- c(check_PL$club_name[26:47])
# we get the nationalities from the leagues
# furthermore we will be dropping leagues with too little teams
check_size <- players_clean %>%
select(league_name, club_name) %>%
distinct() %>%
group_by(league_name)%>%
summarise(N = n()) %>%
filter(N <= 8)
players_clean <- players_clean %>%
left_join(
teams_clean %>%
select(team_id, team_name, league_name, league_nationality_name) %>%
distinct(team_id, team_name, league_name, .keep_all = TRUE),
by = c("club_team_id" = "team_id", "league_name" = "league_name", "club_name" = "team_name")
) %>%
#rename(league_nationality_name = nationality_name.y)%>%
select(colnames(players_clean)[1:19], league_nationality_name, everything())%>%
mutate(
league_name = case_when(
league_name == "Premier League"  & club_name %in% russian_prem ~ "Russian Premier League",
league_name == "Premier League" & !(club_name %in% og_prem | club_name %in% russian_prem) ~ "filter",
# rename the primera division leagues
#league_name == "Primera División" ~ paste0(league_name, "_", substr(league_nationality_name, 1, 4)), # wir kombinieren fürs imputieren dann mit der Nationalität
#league_name == "Primera Division" ~ paste0(league_name, "_", substr(league_nationality_name, 1, 4)),
league_name %in% check_size$league_name ~ "filter",
.default = league_name
)
) %>%
filter(league_name != "filter")
teams_clean <- teams_clean %>%
mutate(
league_name = case_when(
league_name == "Premier League"  & team_name %in% russian_prem ~ "Russian Premier League",
league_name == "Premier League" & !(team_name %in% og_prem | team_name %in% russian_prem) ~ "filter",
league_name %in% check_size$league_name ~ "filter",
.default = league_name
)
) %>%
filter(league_name != "filter")
check_duplicates <- players_clean %>%
select(league_nationality_name, league_name, league_id) %>%
distinct() %>%  # Ensure we work with unique combinations
group_by(league_nationality_name, league_name) %>%
summarise(num_ids = n_distinct(league_id), .groups = "drop") %>%
filter(num_ids > 1)
check_duplicates_teams <- teams_clean %>%
select(league_nationality_name, league_name, league_id) %>%
distinct() %>%  # Ensure we work with unique combinations
group_by(league_nationality_name, league_name) %>%
summarise(num_ids = n_distinct(league_id), .groups = "drop") %>%
filter(num_ids > 1)
# ids and league levels will be mapped and fixed
# manually map league_level and create new league_id
league_names <- players_clean %>%
select(league_name, league_nationality_name) %>%
distinct()
write.csv2(league_names, "dataset/league_names.csv")
league_names_edited <- read.csv2("dataset/league_names_edited.csv")
players_clean <- players_clean %>%
select(-league_id, -league_level) %>%
left_join(league_names_edited, by = c("league_name"="league_name", "league_nationality_name" = "league_nationality_name")) %>%
select(colnames(.)[1:18], league_id, league_level, everything())
#league_check[is.na(league_check$league_id), ]
#unique(teams_df$nationality_name)
check_empty_vals <- players_clean %>%
select(key, where(~ !is.numeric(.))) %>%  # Select only non-numeric columns
#filter(if_any(where(~ !is.numeric(.)), ~ . == ""))
summarise(across(everything(), ~ sum(. == "", na.rm = TRUE), .names = "{col}")) %>%
pivot_longer(2:ncol(.), names_to = "column", values_to = "values")
# impute empty value_eur
players_clean$value_eur <- as.numeric(ifelse(players_clean$value_eur == "", NA, players_clean$value_eur))
# add age_range so that we can impute more easily
players_clean <- players_clean %>%
mutate(age_group = case_when(
age <= 18 ~ "18-",
age >= 18 & age <= 20 ~ "18-20",
age >= 21 & age <= 25 ~ "18-20",
age >= 25 & age <= 29 ~ "25-29",
age >= 30            ~ "30+",
TRUE                 ~ NA_character_  # Handle missing or invalid ages
),
overall_range = case_when(
overall <= 50 ~ "50-",
overall >= 51 & overall <= 55 ~ "51-55",
overall >= 56 & overall <= 60 ~ "56-60",
overall >= 61 & overall <= 65 ~ "61-65",
overall >= 66 & overall <= 70 ~ "66-70",
overall >= 71 & overall <= 75 ~ "71-75",
overall >= 76 & overall <= 80 ~ "76-80",
overall >= 81 & overall <= 85 ~ "81-85",
overall >= 86 & overall <= 90 ~ "86-90",
overall > 90 ~ "90+",
TRUE ~ NA_character_  # Handle missing or invalid overall values
)
)
# Impute missing values in value_eur
players_clean <- players_clean %>%
group_by(position_category, age_group, overall_range, league_level) %>%  # Group by relevant columns, including age_group
mutate(value_eur = ifelse(is.na(value_eur), mean(value_eur, na.rm = TRUE), value_eur)) %>%
ungroup() %>%# Remove grouping
mutate(value_eur = ifelse(is.na(value_eur), min(value_eur, na.rm = TRUE), value_eur)) #this only concerns one observation
# TODO: teams_df, aktualisiere hier die IDs und die League Levels bzw. missing values
summary(players_clean$value_eur)
#++ Checkpoint
players_clean_checkpoint <- players_clean
na_summary <- players_clean %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "{col}")) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "na_count") %>%
mutate(
na_fraction_perc = na_count / nrow(players_clean) * 100
) %>%
filter(na_count > 0)
na_summary
# players on loan do not have a club_joined_date
test <- players_clean %>%
select(key, long_name, club_name, club_joined_date, on_loan) %>%
filter(is.na(club_joined_date))
# simplified assumption, player joined on loan in the last summer transfer window -> we will make
# the date 01.08 + year of fifa version - 1 (fifa is released in sept of the year before the versions year)
club_joined_date <- ifelse(is.na(players_clean$club_joined_date),
paste0("20", (players_clean$fifa_version)-1, "-08-01"),
players_clean$fifa_version)
head(club_joined_date)
# simplified assumption, player joined on loan in the last summer transfer window -> we will make
# the date 01.08 + year of fifa version - 1 (fifa is released in sept of the year before the versions year)
players_clean$club_joined_date <- ifelse(is.na(players_clean$club_joined_date),
paste0("20", (players_clean$fifa_version)-1, "-08-01"),
players_clean$club_joined_date)
players_clean <- players_clean_checkpoint
na_summary <- players_clean %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "{col}")) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "na_count") %>%
mutate(
na_fraction_perc = na_count / nrow(players_clean) * 100
) %>%
filter(na_count > 0)
na_summary
# players on loan do not have a club_joined_date
test <- players_clean %>%
select(key, long_name, club_name, club_joined_date, on_loan) %>%
filter(is.na(club_joined_date))
# simplified assumption, player joined on loan in the last summer transfer window -> we will make
# the date 01.08 + year of fifa version - 1 (fifa is released in sept of the year before the versions year)
players_clean$club_joined_date <- ifelse(is.na(players_clean$club_joined_date),
as.Date(paste0("20", (players_clean$fifa_version)-1, "-08-01")),
players_clean$club_joined_date)
# simplified assumption, player joined on loan in the last summer transfer window -> we will make
# the date 01.08 + year of fifa version - 1 (fifa is released in sept of the year before the versions year)
players_clean$club_joined_date <- as.Date(ifelse(is.na(players_clean$club_joined_date),
as.Date(paste0("20", (players_clean$fifa_version)-1, "-08-01")),
players_clean$club_joined_date))
players_clean <- players_clean_checkpoint
na_summary <- players_clean %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "{col}")) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "na_count") %>%
mutate(
na_fraction_perc = na_count / nrow(players_clean) * 100
) %>%
filter(na_count > 0)
na_summary
# players on loan do not have a club_joined_date
test <- players_clean %>%
select(key, long_name, club_name, club_joined_date, on_loan) %>%
filter(is.na(club_joined_date))
# simplified assumption, player joined on loan in the last summer transfer window -> we will make
# the date 01.08 + year of fifa version - 1 (fifa is released in sept of the year before the versions year)
players_clean$club_joined_date <- ifelse(is.na(players_clean$club_joined_date),
as.Date(paste0("20", (players_clean$fifa_version)-1, "-08-01")),
as.Date(players_clean$club_joined_date))
players_clean$club_joined_date <- as.Date(players_clean$club_joined_date )
players_clean$club_joined_date <- as.Date(players_clean$club_joined_date)
# simplified assumption, player joined on loan in the last summer transfer window -> we will make
# the date 01.08 + year of fifa version - 1 (fifa is released in sept of the year before the versions year)
players_clean$club_joined_date <- as.Date(ifelse(
is.na(players_clean$club_joined_date),
paste0("20", (players_clean$fifa_version) - 1, "-08-01"),
as.character(players_clean$club_joined_date)  # Convert to character for compatibility
))
players_clean <- players_clean_checkpoint
na_summary <- players_clean %>%
summarise(across(everything(), ~ sum(is.na(.)), .names = "{col}")) %>%
pivot_longer(cols = everything(), names_to = "column", values_to = "na_count") %>%
mutate(
na_fraction_perc = na_count / nrow(players_clean) * 100
) %>%
filter(na_count > 0)
na_summary
# players on loan do not have a club_joined_date
test <- players_clean %>%
select(key, long_name, club_name, club_joined_date, on_loan) %>%
filter(is.na(club_joined_date))
# simplified assumption, player joined on loan in the last summer transfer window -> we will make
# the date 01.08 + year of fifa version - 1 (fifa is released in sept of the year before the versions year)
players_clean$club_joined_date <- as.Date(ifelse(
is.na(players_clean$club_joined_date),
paste0("20", (players_clean$fifa_version) - 1, "-08-01"),
as.character(players_clean$club_joined_date)  # Convert to character for compatibility
))
# goalkeeping_speed na für alle nicht GKs -  eine Ausnahme, diese werden wir ausschließen
players_clean <- players_clean %>%
filter(!(position_category == "GK" & is.na(goalkeeping_speed))) %>%
mutate(
goalkeeping_speed = ifelse(is.na(goalkeeping_speed), 0, goalkeeping_speed)
)
# next we will check the rating scores
players_clean_base <- players_clean
skill_rating <- na_summary$column[5:length(na_summary$column)]
# filter if nas for more than half the all skill_ratings
skill_na_keys <- players_clean_base %>%
select(key, all_of(skill_rating)) %>%
mutate(across(all_of(skill_rating), is.na, .names = "{.col}_na")) %>%  # Retain column names
mutate(NA_sum = rowSums(across(ends_with("_na")))) %>%
filter(NA_sum >= 4) %>%
select(key)
players_clean <- players_clean_base %>%
filter(!(key %in% skill_na_keys))
